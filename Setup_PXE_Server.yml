---
- name: Setup System for a PXE Server
  hosts: localhost
  vars_files:
    - pxe_vars.yml
    - template_file_vars.yml
    - file_copy_vars.yml
    - tftp_files.yml
    - tftp_boot_files.yml

  tasks:

## Install Packages

    - name: Install Packages for PXE Boot Services
      ansible.builtin.dnf:
        name: "{{ install_packages }}"
        state: present
      become: true

##  Enable Firewall Ports and Services
    - name: Enable Firewall Services
      ansible.posix.firewalld:
        service: "{{ item }}"
        permanent: true
        state: enabled 
        immediate: true 
      loop: "{{ firewall_services }}"


## Create PXE Boot Files directory if don't exist
    - name: Create the Remix Directories for PXEBoot
      ansible.builtin.file:
        path: /opt/FedoraRemixPXE/
        state: directory
        mode: '0755'
      become: true

## Check for Files in PXEBoot Remix Directory to decide if to download new files


## Make TFTP Directory

    - name: Create directory for TFTP Files
      ansible.builtin.file:
        path: /var/lib/tftpboot/{{ item }}
        state: directory
        mode: '0755'
      loop:
        - pxelinux.cfg
        - f38
        - uefi

## Make HTTPD Directory

    - name: Create directory for TFTP Files
      ansible.builtin.file:
        path: /var/www/html/livecd
        state: directory
        mode: '0755'


##  Use Jinja Template Module to create configuration

    - name: Create configuration files
      # Comment
      ansible.builtin.template:
        src: "{{ item['filename'] }}"
        dest: "{{ item['destination_filename'] }}"
      loop: "{{ template_files }}"
    
##  Use Ansible Copy Modules to copy static configuration files

    - name: Copy Files to correct locations
      ansible.builtin.copy:
        src: "{{ item['filename'] }}"
        dest: "{{ item['destination_filename'] }}"
      loop: "{{ files_to_copy }}"

## Copy TFTP Files from Remote source to new directory

    - name: Copy Syslinux Files to correct locations
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /var/lib/tftpboot/
        remote_src: true
      loop: "{{ tftp_files }}"

## Copy TFTP Kernel and Boot Files from Remote source to new directory
    - name: Copy Kernel and Boot Files to correct locations
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /var/lib/tftpboot/f38
        remote_src: true
      loop: "{{ tftp_boot_files }}"



## Enable Services (must be done after configuration files applied)
    - name: Enable Services 
      ansible.builtin.systemd_service:
        enabled: true
        daemon_reload:  true 
        name: "{{ item }}"
        no_block: false
        scope: system
        state: started
      loop: "{{ service_list }}"


## Copy SquashFS from mounted ISO or USB Drive


    - name: Set Ansible Mount Fact
      ansible.builtin.set_fact:
        mount_points: "{{ ansible_mounts | map(attribute='mount') | list }}"

    - name: Set Mount Point for Fedora Remix
      ansible.builtin.set_fact:
        fedora_remix: "{{ item }}"
      when: "'FedoraRemix' in item"
      loop: "{{ mount_points }}"

    - name: Copy SQUASHFS from FedoraRemix CD
      ansible.builtin.copy:
        src: "{{ fedora_remix }}/LiveOS/squashfs.img"
        dest: /var/www/html/livecd/

## Enable IP Forwarding and Routing - name: 

    - name: Enable IP Address Forwarding and Masquerading in Kernel
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: true
        state: present
        reload: true

    - name: Enable IP Address Forwarding and Masquerading in Firewall
      ansible.posix.firewalld:
        rich_rule: rule family=ipv4 source address={{ network_subnet }}.0/24 masquerade'
        permanent: true
        state: enabled 
        immediate: true

